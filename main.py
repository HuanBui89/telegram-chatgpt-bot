import os
import openai
import random
import logging
import sqlite3
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters
)
from googletrans import Translator
from datetime import datetime

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# Kh·ªüi t·∫°o translator
translator = Translator()

# Sticker vui
STICKERS = [
    "CAACAgUAAxkBAAEKoHhlg1I4Q2w4o0zMSrcjC3fycqQZlwACRQEAApbW6FYttxIfTrbN6jQE",
    "CAACAgUAAxkBAAEKoH1lg1JY1LtONXyA-VOFe4LEBd6gxgACawEAApbW6FYP4EL9Hx_aVjQE"
]

# G·ª£i √Ω khi kh√¥ng bi·∫øt n√≥i g√¨
SUGGESTIONS = [
    "K·ªÉ cho m√¨nh nghe v·ªÅ m·ªôt ng√†y c·ªßa b·∫°n ƒëi!",
    "B·∫°n c·∫ßn gi√∫p g√¨ kh√¥ng? M√¨nh c√≥ th·ªÉ t√¨m th√¥ng tin, t·∫°o ·∫£nh, hay ch·ªâ ƒë∆°n gi·∫£n l√† tr√≤ chuy·ªán üòä",
    "B·∫°n mu·ªën m√¨nh v·∫Ω g√¨ kh√¥ng? Th·ª≠ /draw [√Ω t∆∞·ªüng c·ªßa b·∫°n]"
]

# Kh·ªüi t·∫°o database
def init_db():
    conn = sqlite3.connect('chat_history.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  username TEXT,
                  first_seen DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    c.execute('''CREATE TABLE IF NOT EXISTS conversations
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  role TEXT,
                  content TEXT,
                  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

init_db()

# L∆∞u tin nh·∫Øn v√†o database
def save_message(user_id, role, content):
    conn = sqlite3.connect('chat_history.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    c.execute("INSERT INTO conversations (user_id, role, content) VALUES (?, ?, ?)",
              (user_id, role, content))
    conn.commit()
    conn.close()

# Tr·∫£ l·ªùi b·∫±ng ChatGPT
async def chat_with_gpt(user_id, message):
    try:
        # D·ªãch sang ti·∫øng Vi·ªát n·∫øu c·∫ßn
        detected = translator.detect(message)
        if detected.lang != 'vi':
            translated = translator.translate(message, dest='vi')
            processed_text = translated.text
            logger.info(f"Translated {detected.lang} to vi: {message} -> {processed_text}")
        else:
            processed_text = message

        base_prompt = {
            "role": "system",
            "content": (
                "B·∫°n l√† tr·ª£ l√Ω Gen Z th√¢n thi·ªán. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, vui v·∫ª, d√πng emoji. "
                "Kh√¥ng m√°y m√≥c. N·∫øu h·ªèi v·ªÅ ng√¥n ng·ªØ, nh·∫Øc r·∫±ng b·∫°n hi·ªÉu ƒëa ng√¥n ng·ªØ."
            )
        }

        # L·∫•y l·ªãch s·ª≠ t·ª´ database
        conn = sqlite3.connect('chat_history.db')
        c = conn.cursor()
        c.execute("SELECT role, content FROM conversations WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10", (user_id,))
        history = [dict(zip(['role', 'content'], row)) for row in c.fetchall()]
        conn.close()

        messages = [base_prompt] + history
        messages.append({"role": "user", "content": processed_text})

        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7
        )

        reply = response.choices[0].message.content.strip()
        save_message(user_id, "user", message)
        save_message(user_id, "assistant", reply)
        return reply

    except Exception as e:
        logger.error(f"GPT error: {str(e)}")
        return f"‚ùå L·ªói chatbot: {str(e)}"

# L·ªánh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ Bot Help Guide:
- Chat b√¨nh th∆∞·ªùng ƒë·ªÉ tr√≤ chuy·ªán
- /reset - X√≥a l·ªãch s·ª≠ chat
- /draw [m√¥ t·∫£] - T·∫°o ·∫£nh AI
- /help - Xem h∆∞·ªõng d·∫´n
- G·ª≠i sticker ƒë·ªÉ nh·∫≠n sticker vui
"""
    await update.message.reply_text(help_text)

# L·ªánh /reset
async def reset_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        conn = sqlite3.connect('chat_history.db')
        c = conn.cursor()
        c.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text("üßπ ƒê√£ xo√° s·∫°ch l·ªãch s·ª≠ r·ªìi nghen~ G√µ g√¨ ƒë√≥ th·ª≠ ƒëi!")
    except Exception as e:
        logger.error(f"Reset error: {str(e)}")
        await update.message.reply_text("‚ùå L·ªói khi reset l·ªãch s·ª≠")

# L·ªánh /draw
async def draw_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args)
    if not prompt:
        await update.message.reply_text("üé® G√µ n·ªôi dung c·∫ßn v·∫Ω nh∆∞ `/draw m√®o m·∫∑c √°o m∆∞a` nha~", quote=True)
        return

    try:
        await update.message.reply_text("üñåÔ∏è ƒê·ª£i x√≠u tui v·∫Ω h√¨nh x·ªãn cho n√®...", quote=True)
        save_message(update.message.from_user.id, "user", f"/draw {prompt}")

        response = await openai.Image.acreate(
            prompt=f"{prompt}, anime style, colorful",
            n=1,
            size="512x512"
        )

        image_url = response["data"][0]["url"]
        await context.bot.send_photo(
            chat_id=update.message.chat.id,
            photo=image_url,
            reply_to_message_id=update.message.message_id,
            caption=f'üé® "{prompt}"'
        )
        save_message(update.message.from_user.id, "assistant", f"[IMAGE] {prompt}")

    except openai.error.InvalidRequestError:
        await update.message.reply_text("‚ùå N·ªôi dung kh√¥ng ph√π h·ª£p ƒë·ªÉ t·∫°o ·∫£nh")
    except Exception as e:
        logger.error(f"Draw error: {str(e)}")
        await update.message.reply_text(f"‚ùå L·ªói khi t·∫°o ·∫£nh: {str(e)}")

# X·ª≠ l√Ω tin nh·∫Øn
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = message.from_user.id
    user_text = message.text.strip()
    bot_username = (await context.bot.get_me()).username

    # Ki·ªÉm tra trong group
    is_group = message.chat.type in ['group', 'supergroup']
    is_tagged = f"@{bot_username}" in message.text
    is_reply_to_bot = (
        message.reply_to_message and
        message.reply_to_message.from_user.username == bot_username
    )

    if is_group and not is_tagged and not is_reply_to_bot:
        return

    if is_tagged:
        user_text = user_text.replace(f"@{bot_username}", "").strip()

    try:
        # G·ª£i √Ω khi tin nh·∫Øn qu√° ng·∫Øn
        if len(user_text) < 2:
            await message.reply_text(random.choice(SUGGESTIONS))
            return

        # X·ª≠ l√Ω l·ªùi ch√†o
        greetings = ["hi", "hello", "ch√†o", "yo", "alo", "hey", "h√™"]
        if user_text.lower().split()[0] in greetings:
            await message.reply_text(random.choice([
                "üëã Ch√†o b·∫°n! M√¨nh l√† tr·ª£ l√Ω ·∫£o Gen Z n√®~",
                "üôã‚Äç‚ôÄÔ∏è Xin ch√†o! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
                "ü§ó Ch√†o b·∫°n! M√¨nh ƒëang nghe ƒë√¢y!"
            ]))
            return

        # G·ª≠i sticker khi ph√°t hi·ªán tin troll
        troll_words = ["=))", "haha", "kkk", ":v", "ü§£", "troll", "ƒë√πa"]
        if any(word in user_text.lower() for word in troll_words):
            await context.bot.send_sticker(
                chat_id=message.chat.id,
                sticker=random.choice(STICKERS),
                reply_to_message_id=message.message_id
            )

        # Tr·∫£ l·ªùi b·∫±ng GPT
        reply = await chat_with_gpt(user_id, user_text)
        await message.reply_text(reply, reply_to_message_id=message.message_id)

    except Exception as e:
        logger.error(f"Message error: {str(e)}")
        await message.reply_text("‚ö†Ô∏è Bot b·ªã l·ªói, th·ª≠ l·∫°i sau nha!", reply_to_message_id=message.message_id)

# Ch·∫°y bot
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Th√™m handlers
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reset", reset_history))
    application.add_handler(CommandHandler("draw", draw_image))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # B·∫Øt ƒë·∫ßu bot
    logger.info("Bot is starting...")
    application.run_polling()

if __name__ == "__main__":
    main()
