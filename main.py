import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import os

# =============================
# üîß C·∫•u h√¨nh
# =============================
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # ƒë·∫∑t trong Railway ho·∫∑c .env
BOT_TOKEN = os.getenv("BOT_TOKEN")  # token Telegram bot
MODEL_NAME = "gpt-5"  # ho·∫∑c "gpt-4o-mini" n·∫øu d√πng b·∫£n ti·∫øt ki·ªám h∆°n

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# =============================
# ü§ñ H√†m g·ªçi GPT
# =============================
async def chat_with_gpt(prompt: str) -> str:
    try:
        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": "B·∫°n l√† Huan's AI Assistant, tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán, th√¥ng minh v√† lu√¥n gi√∫p ng∆∞·ªùi d√πng t·ªëi ∆∞u c√¥ng vi·ªác."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8,
            max_tokens=800
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"L·ªói khi g·ªçi OpenAI API: {e}")
        return "‚ö†Ô∏è Xin l·ªói, h·ªá th·ªëng t·∫°m th·ªùi g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. B·∫°n th·ª≠ l·∫°i sau v√†i gi√¢y nh√©!"

# =============================
# üì© X·ª≠ l√Ω tin nh·∫Øn Telegram
# =============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Xin ch√†o üëã M√¨nh l√† Huan‚Äôs AI Assistant ‚Äî tr·ª£ l√Ω ·∫£o th√¥ng minh c·ªßa b·∫°n. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    logging.info(f"Ng∆∞·ªùi d√πng: {user_text}")
    
    reply = await chat_with_gpt(user_text)
    await update.message.reply_text(reply)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(msg="L·ªói c·∫≠p nh·∫≠t:", exc_info=context.error)
    if update and update.message:
        await update.message.reply_text("‚ùå Xin l·ªói, m√¨nh g·∫∑p l·ªói khi x·ª≠ l√Ω. Th·ª≠ l·∫°i nh√©!")

# =============================
# üöÄ Kh·ªüi ch·∫°y bot
# =============================
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    print("ü§ñ Bot ƒëang ch·∫°y... S·∫µn s√†ng nh·∫≠n tin nh·∫Øn!")
    app.run_polling()
