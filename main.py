import os
import openai
from telegram import Update
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext

# Token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# C·∫•u h√¨nh OpenAI
openai.api_key = OPENAI_API_KEY

# L∆∞u l·ªãch s·ª≠ chat (b·ªô nh·ªõ RAM) theo user_id
conversation_history = {}

# G·ªçi API ChatGPT c√≥ l∆∞u l·ªãch s·ª≠ ƒë·ªëi tho·∫°i
first_time_users = set()
def chat_with_gpt(user_id, user_message):
    history = conversation_history.get(user_id, [])

    # Th√™m c√¢u h·ªèi ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    history.append({"role": "user", "content": user_message})

    # G·ª≠i to√†n b·ªô ƒëo·∫°n chat l√™n GPT
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # ho·∫∑c gpt-4 n·∫øu b·∫°n c√≥ quy·ªÅn
        messages=history
    )

    reply = response['choices'][0]['message']['content']

    # Ghi l·∫°i c√¢u tr·∫£ l·ªùi t·ª´ bot
    history.append({"role": "assistant", "content": reply})
    conversation_history[user_id] = history[-10:]  # Gi·ªØ t·ªëi ƒëa 10 ƒëo·∫°n g·∫ßn nh·∫•t

    return reply

# H√†m x·ª≠ l√Ω tin nh·∫Øn Telegram
def handle_message(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    user_message = message.text or ""
    bot_username = context.bot.username

    is_group = message.chat.type in ['group', 'supergroup']
    is_tagged = f"@{bot_username}" in user_message
    is_replied_to_bot = (
        message.reply_to_message and
        message.reply_to_message.from_user.username == bot_username
    )

    # B·ªè qua n·∫øu trong group m√† kh√¥ng tag ho·∫∑c kh√¥ng reply v√†o bot
    if is_group and not is_tagged and not is_replied_to_bot:
        return

    # Xo√° @bot kh·ªèi tin nh·∫Øn ƒë·ªÉ l·∫•y n·ªôi dung g·ªëc
    if is_tagged:
        user_message = user_message.replace(f"@{bot_username}", "").strip()

    try:
        # ‚úÖ Tr·∫£ l·ªùi ch√†o ƒë·∫∑c bi·ªát n·∫øu l√† l·∫ßn ƒë·∫ßu
        if user_id not in first_time_users:
            first_time_users.add(user_id)
            message.reply_text(
                "üñêÔ∏è Xin ch√†o n√≠! T√¥i l√† tr·ª£ l√Ω c·ªßa anh Hu√¢n, b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ n√†o?",
                reply_to_message_id=message.message_id
            )
            return

        # ‚úÖ Nh·ªØng l·∫ßn sau th√¨ tr·∫£ l·ªùi b·∫±ng GPT
        chatgpt_reply = chat_with_gpt(user_id, user_message)
        message.reply_text(
            chatgpt_reply,
            reply_to_message_id=message.message_id
        )

    except Exception as e:
        message.reply_text("‚ö†Ô∏è L·ªói: " + str(e), reply_to_message_id=message.message_id)


# Kh·ªüi ƒë·ªông bot
def main():
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
